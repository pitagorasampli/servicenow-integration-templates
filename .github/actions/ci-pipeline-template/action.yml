name: 'CI Pipeline Template'
description: 'A reusable action for CI pipeline'

inputs:
  PROJETO:
    description: 'Nome do projeto'
    required: true
  SERVICO:
    description: 'Nome do serviço'
    required: true
  DEFAULT_APROVADOR_EMAIL:
    description: 'Email do aprovador padrão'
    required: true
  GH_TOKEN:
    description: 'GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set variables
      shell: bash
      run: |
        echo "PROJETO=${{ inputs.PROJETO }}" >> $GITHUB_ENV
        echo "SERVICO=${{ inputs.SERVICO }}" >> $GITHUB_ENV
        echo "DEFAULT_APROVADOR_EMAIL=${{ inputs.DEFAULT_APROVADOR_EMAIL }}" >> $GITHUB_ENV

    - name: Fetch last merged PR details
      id: fetch_pr_details
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        PR_RESPONSE=$(gh pr list --repo ${{ github.repository }} --state merged --json number --jq '.[0]')
        PR_NUMBER=$(echo $PR_RESPONSE | jq -r '.number')
        
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

    - name: Fetch PR approver emails and labels
      id: fetch_approver_emails_and_labels
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        echo "Fetching PR approver emails and labels for PR number: $PR_NUMBER"

        # Fetch reviews for the PR
        REVIEWS=$(curl -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews")
        
        echo "Reviews fetched: $REVIEWS"

        # Process reviews to find the approvers
        APPROVER_LOGINS=$(echo "$REVIEWS" | jq -r '.[] | select(.state=="APPROVED") | .user.login')

        # Initialize array for approver emails
        APPROVER_EMAILS=()

        if [ -z "$APPROVER_LOGINS" ]; then
          APPROVER_EMAILS+=("${{ inputs.DEFAULT_APROVADOR_EMAIL }}")
        else
          for login in $APPROVER_LOGINS; do
            email=$(curl -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/users/$login" | jq -r '.email')
            APPROVER_EMAILS+=("$email")
          done
        fi

        # Convert array to JSON array format
        APPROVER_EMAILS_JSON=$(printf '%s\n' "${APPROVER_EMAILS[@]}" | jq -R . | jq -s .)

        echo "Aprovadores utilizados: $APPROVER_EMAILS_JSON"
        echo "APROVADORES_EMAIL=$APPROVER_EMAILS_JSON" >> $GITHUB_ENV

        # Fetch labels for the PR
        LABELS=$(curl -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels")
        
        TAGS=$(echo "$LABELS" | jq -r '.[].name' | tr '\n' ',' | sed 's/,$//')

        echo "Labels fetched: $TAGS"
        echo "TAGS=$TAGS" >> $GITHUB_ENV

    - name: Send information to ServiceNow
      shell: bash
      run: |
        ENDPOINT="https://krotondev.service-now.com/api/kra/release/create"
        LINK_EXTERNO="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        AUTH="YXBpLnVzZXI6MTpNd28tWzpxWHR7bC4/R311QyQ0MCxNam9XOTVqeHZebl0peDNsPw=="

        # Set default ORIGEM_RELEASE, INCIDENTE, and SOLICITACAO_SERVICO values
        ORIGEM_RELEASE="Outros"
        INCIDENTE=""
        SOLICITACAO_SERVICO=""

        # Check tags for incident or service request identifiers
        if [[ $TAGS == *"INC"* ]]; then
          INC_TAG=$(echo $TAGS | grep -o 'INC[0-9]*')
          ORIGEM_RELEASE="Incidente"
          INCIDENTE=$INC_TAG
        elif [[ $TAGS == *"RITM"* ]]; then
          RITM_TAG=$(echo $TAGS | grep -o 'RITM[0-9]*')
          ORIGEM_RELEASE="Solicitação de Serviço"
          SOLICITACAO_SERVICO=$RITM_TAG
        fi

        PAYLOAD=$(cat <<EOF
        {
          "origemCriacao": "GitHub Actions",
          "abertoPor": "${{ github.actor }}",
          "aprovadoPor": $APROVADORES_EMAIL,
          "trem": "chatbot",
          "grupo": "Projetos",
          "classificacao": "Manutenção Corretiva",
          "servico": "Pós-graduação",
          "aplicativo": "Cosmos-ERP",
          "itemConfiguracao": "$SERVICO",
          "bu": "Cogna",
          "origemRelease": "$ORIGEM_RELEASE",
          "incidente": "$INCIDENTE",
          "solicitacaoServico": "$SOLICITACAO_SERVICO",
          "outros": "GitHub Actions",
          "titulo": "Build ${{ github.run_id }}",
          "descricao": "Descrição detalhada do build ${{ github.run_id }}",
          "inicioReal": "${{ github.event.workflow_run.created_at }}",
          "terminoReal": "${{ github.event.workflow_run.updated_at }}",
          "fechamento": "Encerrada com sucesso",
          "linkExterno": "$LINK_EXTERNO"
        }
        EOF
        )

        echo "Payload to be sent:"
        echo "$PAYLOAD"

        curl -X POST "$ENDPOINT" \
             -H "Authorization: Basic $AUTH" \
             -H "Content-Type: application/json" \
             -d "$PAYLOAD"
